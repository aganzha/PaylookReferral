@model PayLook.Models.DoPasswordResetModel
@{
    ViewBag.Title = "Смена пароля";
    Layout = "~/Views/Shared/_LoginLayout.cshtml";

    var status = TempData["Status"] as string;

    var token = this.Request.QueryString["token"] != null ? this.Request.QueryString["token"] : Model.Tkn.ToString();
}

@if (!string.IsNullOrEmpty(status))
{

    if (status == "success")
    {
    <div class="message-success js-message">
        <strong>Успех!</strong>Пароль успешно изменен. Вы можете <a href="/account/logon">войти</a>.        
    </div>       
    }
    if (status == "broken")
    {
    <div class="message-error js-message">
        <strong>Ссылка недействительна!</strong>. Ссылка, которая была отправлена вам на почту больше не действительна.Чтобы восстановить пароль нужно сгенировать новую ссылку и снова отправить ее на почту. Это можно сделать <a href="/account/passwordreset">здесь</a>        
    </div>       
    }
    if (status == "uknown")
    {
        <div class="message-error js-message">
        <strong>Ошибка!</strong> По какой-то причине восстановить пароль не получилось.
         Вы можете попробовать <a href="/account/passwordreset">еще раз</a> или написать в поддержку на support@paylook.ru
         </div>
    }
}

@using (Html.BeginForm("DoPasswordReset", "Account", FormMethod.Post, new { @class = "enter" }))
{
    
    <input type="hidden" name="Tkn" value="@token" />
    
    <div class="enter__fields">
        @{
    string message = string.Empty;
    ModelState state = null;
    ViewData.ModelState.TryGetValue("Password", out state);
    var hasErrors = state != null && state.Errors.Any();
    message = (state != null && state.Errors.Any()) ? state.Errors.First().ErrorMessage : string.Empty;    
        }
        <fieldset class="@(hasErrors ? "error" : "")">
            <label for="enter-password">Пароль</label>
            <p><strong>Ошибка:</strong>@message</p>
            @Html.PasswordFor(m => m.Password, new { id = "enter-password" })
        </fieldset>
        @{
    message = string.Empty;
    state = null;
    ViewData.ModelState.TryGetValue("ConfirmPassword", out state);
    hasErrors = state != null && state.Errors.Any();
    message = (state != null && state.Errors.Any()) ? state.Errors.First().ErrorMessage : string.Empty;    
        }
        <fieldset class="@(hasErrors ? "error" : "")">
            <label for="confirm-password">Подтверждение пароля</label>
            <p><strong>Ошибка:</strong>@message</p>
            @Html.PasswordFor(m => m.ConfirmPassword, new { id = "confirm-password" })
        </fieldset>
    </div>
    <div class="enter__bottom">
        <div class="enter__btn">
            <button type="submit" class="btn-big"><strong>Изменить пароль</strong></button>
            @*<a href="@returnUrl" title="Назад">назад</a>*@
        </div>
    </div>
}



@*<h2>Change Password</h2>
<p>
    Use the form below to change your password. 
</p>
<p>
    New passwords are required to be a minimum of @Membership.MinRequiredPasswordLength characters in length.
</p>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>*@

@*@using (Html.BeginForm()) {
    @Html.ValidationSummary(true, "Password change was unsuccessful. Please correct the errors and try again.")
    <div>
        <fieldset>
            <legend>Account Information</legend>

            <div class="editor-field">
                
                <input type="hidden" name="Tkn" value="@ViewBag.Token"/>
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Password)
            </div>
            <div class="editor-field">
                @Html.PasswordFor(m => m.Password)
                @Html.ValidationMessageFor(m => m.Password)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.ConfirmPassword)
            </div>
            <div class="editor-field">
                @Html.PasswordFor(m => m.ConfirmPassword)
                @Html.ValidationMessageFor(m => m.ConfirmPassword)
            </div>

            <p>
                <input type="submit" value="Change Password" />
            </p>
        </fieldset>
    </div>
}*@
